import re
import hashlib
import base64
import sys

try:
    import dnfile
    from Crypto.Cipher import AES

except ImportError:
    print("Please install the following packages: dnfile (ver. 0.14.1) and pycryptodome")
    exit(1)

config_dict = {}

confPattern = re.compile(
    rb"""(?x)
    \x72(...)\x70\x80...\x04
    """,
    re.DOTALL
)

mutexPattern1 = re.compile(
    rb"""(?x)
    \x72(...)\x70\x80...\x04
    \x72...\x70\x28...\x0A
    """,
    re.DOTALL
)

mutexPattern2 = re.compile(
    rb"""(?x)
    \x72(...)\x70\x80...\x04\x2A
    """,
    re.DOTALL
)

installBinNamePattern = re.compile(
    rb"""(?x)
    \x72(...)\x70\x80...\x04
    \x72...\x70\x80...\x04
    \x72...\x70\x28...\x0A
    """,
    re.DOTALL
)

installDirPattern = re.compile(
    rb"""(?x)
    \x72(...)\x70\x80...\x04
    \x72...\x70\x80...\x04
    \x72...\x70\x80...\x04
    \x72...\x70\x28...\x0A
    """,
    re.DOTALL
)

mutexPatterns = [mutexPattern1, mutexPattern2]
def deriveAESKey(encryptedMutex : str):
    md5Hash = hashlib.md5(encryptedMutex.encode()).hexdigest()
    AESKey = md5Hash[:30] + md5Hash + '00'
    return AESKey

def decryptAES(key : str, ciphertext : str, mode):
    cipher = AES.new(bytes.fromhex(key), mode)
    decodedcipher = base64.b64decode(ciphertext)
    decryptedBuff = cipher.decrypt(decodedcipher)

    valid_bytes = set(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-/,')
    filtered_bytes = bytes(b for b in decryptedBuff if b in valid_bytes).decode('utf-8').split(',')
    if len(filtered_bytes) > 1:
        return filtered_bytes
    return ''.join(filtered_bytes)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Usage: xworm.py [sampleFile]")
        exit(1)

    with open(sys.argv[1], 'rb') as f:
        data = f.read()
        try:
            dn = dnfile.dnPE(data=data)
            extracted = []
            conf = []

            for pattern in mutexPatterns:
                mutexMatched = pattern.findall(data)
                if mutexMatched:
                    mutex = dn.net.user_strings.get_us(int.from_bytes(mutexMatched[0], "little")).value
                    AESKey = deriveAESKey(mutex)
                    break

            for match in confPattern.findall(data):
                er_string = dn.net.user_strings.get_us(int.from_bytes(match, "little")).value
                extracted.append(er_string)

            for i in range(5):
                conf.append(decryptAES(AESKey, extracted[i], AES.MODE_ECB))


            config_dict['C2'] = conf[0]
            if 1 <= int(conf[1]) <= 65535:
                config_dict['Port'] = conf[1]
                config_dict['AES Key (decrypt/encrypt connections)'] = conf[2]
                config_dict['SPL'] = conf[3]
            else:
                config_dict['Port'] = ''
                config_dict['AES Key (decrypt/encrypt connections)'] = conf[1]
                config_dict['SPL'] = conf[2]
            config_dict['AES Key (decrypt configs)'] = AESKey
            config_dict['Mutex'] = mutex

            installBinMatch = installBinNamePattern.findall(data)
            installDirMatch = installDirPattern.findall(data)

            if installDirMatch:
                installDir = dn.net.user_strings.get_us(int.from_bytes(installDirMatch[0], "little")).value
                config_dict['InstallDir'] = decryptAES(AESKey, installDir, AES.MODE_ECB)
            if installBinMatch:
                installBinName = dn.net.user_strings.get_us(int.from_bytes(installBinMatch[0], "little")).value
                config_dict['InstallBinName'] = decryptAES(AESKey, installBinName, AES.MODE_ECB)

            print(config_dict)

        except Exception as e:
            print(e)

